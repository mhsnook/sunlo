


EPIC Spaced Repetition API: 
1. âœ… FSRS helper functions (convert from Rust)
1. âœ… FSRS scheduler RPC API
1. âœ… View for fetching today's review
	1. âœ… View for fetching cards "due" today
	1. âœ… View for fetching 15 new cards
1. âœ… Convert the /review page
	1. implement the Interval function in JS?
1. debug debug debug
1. convert the other views that depend on reviews

EPIC: Postgres DX / Run Supabase Locally
1. âœ… run locally & document
1. âœ… add migrations maybe? maybe just seeds or schema?
	- organize seeds a bit more so they can be committed (no user data, phrases separated from sample user data)
1. make the email stuff work with the local setup
1. pgTap set up testing framework / run tests on the RPC functions: https://supabase.com/docs/guides/database/extensions/pgtap

EPIC: User Testability
1. when you sign in for the first time it redirects you to the home page not a confirmation/getting-started page
1. when you sign in for the first time, the /learn screen is an error; actually anything accessing the profile
	seems to be an error -- it should redirect you? we should put profile into context?



EPIC: Convert useQueries to usequery(someOptions) format
-	instead of using { data, isPending, error }, we may want to switch to 
	queryClient.ensureQueryData(queryOptions) higher up in the route tree
-	perhaps just adopt for one query, like the relationships, bc we should get
	immediate UX/code improvement -- only placing error/pending states
	between navigations and removing them from
	- âœ… Completed for useLanguage
	- âœ… Completed for useDeck
	- Do the same for useProfile
	- Do the same for useRelations

EPIC OF SIGNUPS AND GETTING STARTED AND CONNECTING FRIENDS
1.	âœ… Got to actually build the signup workflow, for learners and friends
	1.	âœ… add a mock for the form input
		1.	âœ… make the form input look niceeee
	1.	âœ… make the form input work
	1.	~make the signup email nice~
	1.	add "copy invitation text" to invite page
	1.	âœ… differentiate the landing page
		1.	âœ… getting-started page just has the username and primary language, creates the profile only.
		1.	_then_ the differentiated page: 
			*	âœ… learners get the add-first-deck page
			*	âœ… friends get an accept-friendship page
				*	âœ… Build this "accept-one-particular-invite" page
				*	original invite needs to embed the friend's uid
				*	grab the url argument and save it when the temp user is created
				*	detect the friend uid in the user object for the first-redirect after getting-started
	1. âœ… landing page followup steps (/getting-started, etc.)
	1.	implications: there should be someplace in /profile to change this? to "open up" the rest of the app?
		*	so far, no; the user_role is only used for the getting-started page's redirect
1. âœ… search for friends -- results should include relationship if present
	* âœ… this may mean actually the search unit should take an ID and we should fetch the relationship from a map
		(so do like how we have deck.pids and and such, with relationships, refactoring this cache entry)
1.	âœ… use specific mutation keys for invitations/response actions
1.	âœ… destructive buttons like "unfriend" and "cancel invite" and "decline invitation" should all have dialog confirmations

ISSUES
1. malformed link like /learn/undefined should 404, or at least say 'do you wanna start learning this?'
1. When you try to sign up using existing creds you get an error and then get logged in. We
	should handle this. (inspect and special-case the error before throwing, and toast accordingly)
1. why is class s-link not working correctly in the "find a friend" search empty results section? (have manually added a border-b, like a barbarian)

EDGE CASES LEFT BEHIND
1. When you reach the getting-started page with no "user role" set
	* rn the redirect pretends you're a helper
	* we should probably ask ppl instead
1. If you hack the client it's possible to "Accept" an invitation that hasn't been sent;
		the RLS can reject these and/or the friend_summary view can check and verify the who sequence.
		Both of these options seem secure, and they won't conflict.
	- replace this RLS hack with an RPC
	- Explore: move some/many tables out of the public schema, keep the RLS but make them accessible only via RPCs
1. âœ… you can no longer unfriend someone. I would like to build some "info" page/modal or something,
	just for friends...

JOURNEYS TO MOCK
1. Invite a friend (for a learner to invite someone by email)
		* invite email for the friend
		* âœ… accept invitation page, account signup form
		* landing page for the friend when they sign up... (what can they see?)
1. âœ… Find a friend screen (for an anon visitor to find a learner)
		* friend request dialog w signup
		* âœ… Friend request sent / pending requests
		* âœ… Friend request receive, friend request approve, friend request reject


MOCKS / Incompletes
1. Invite-A-Friend is a whole feature-set that needs to be built!
	1. Invite a new user /friends/invite hasn't been tested through
		- may need the email and whatsapp links wired up to have the referring user id?
		- may need a "copy to clipboard" link (for desktop or both?)
1. âœ… The "Deck Home" screen or Welcome Screen
		âœ… Deck overview section, recent reviews and such
			- wire it up
		âœ… Friends activity ?? (maybe doesn't belong here)
			- wire it up
		- move the Quick Search link into the navbar??
1. âœ… The "new friend signup" screens -- what are we doing here? selecting which deck(s) we're helping with... and then what?
	1. How does the friend mode sidebar look? is it the same? are some people Learners _and_ Helpers?
			(ideally, yes?) should we be switching "modes" like one context switcher that has options for
			each deck we're learning and each deck we're helping with...
1. Public Library is a special browsing experience that needs to be built!
	1. âœ… $lang/search needs wiring
	1. âœ… $lang/library needs the "trending/popular" section built
			- wire it up to real data
	1. âœ… $lang/library needs some quick filters
	1. $lang/library needs a search bar added to filter in realtime
	1. deeper interactions with cards:
			- when we open these accordion things, should we open a whole dialog? or have a button that opens the whole dialog?
			- $lang/library/phrase/$pid perhaps should be built which permalinks to the same thing as goes in the dialog
			- âœ… add translations button must work
			- add related phrase?
	1. $lang/library has this "recently reviewed" filter which probably should be a field on the user_card_plus view
	1. $lang/index needs the review overview graph thing made
1. âœ… Deck Settings: replace with the nicer radio: https://v0.dev/chat/PNg3tT-DSoC,
		âœ… and wire up the mutation
		âœ… add the `learning_goal` field on user_deck
		âœ… add the "archive" form, and field on user_deck
		âœ… wire up the mutation
		- perhaps add a mode for how aggro to be (10, 15, 20 new cards per review)
1. âœ… Add-a-card needs form wiring

COMPONENTS (ShadCN/Radix)
1. âœ… Add a Components page to keep track of / showcase all components
1. âœ… Removing daisyUI
		1. disable active link (removed class `disabled`)
		1. âœ… fix color codes (text-base) in SelectOneLanguage
		1. fix accent color
	1. find-replace all these colors: text-base text-base-content etc
1. âœ… turn the contents of card-status-dropdown.tsx into a standard dropdown that works for all card statuses
		âœ… also support no status (add to deck, skip, already learned it)
		- or no deck (start learning this language)
		- or not logged in (login)
1. âœ… use <Loader2 className="animate-spin" /> for main loader spinner
	- Replace all Loader2 with Loader
	- Go to all the disabled buttons and add this spinner
1. Add the "suggest edits to this card"
1. replace my multi-language select with https://craft.mxkaske.dev/post/fancy-multi-select

PRIMARY CARD INTERACTIONS
1. bring over the new structure for relations
1. âœ… make the "add to deck" function work

AUTH
1. âœ… add AuthContext -- so far I've just mocked it with useQuery
1. âœ… add signOut action to AuthContext -- correction: mocked it with its own hook
1. âœ… figure out "redirect to home screen" on logout 
1. âœ… auth guard bounce, login, redirect back (only when not logged in)
1. @TODO in the _auth/login.tsx - why using hooks? we should have this already


NAVIGATION
1. âœ… get back the "active/inactive" link style in sidebar.tsx
1. properly use the disabled option on the nav links
1. add an optional quicksearch component to the navbar, perhaps it immediately opens a search like a dialog and just accepts the component that fills the dialog ðŸ¤”
1. âœ… probably set it to only active-match exact route matches
1. âœ… don't forget to add the Navbar
1. âœ… add context menus (links) to all the pages and scaffold pages

UI POLISH
1. Add activity graph to deck summaries :)) https://app.radicle.xyz/nodes/seed.radicle.xyz/rad:z4V1sjrXqjvFdnCUbxPFqd5p4DtH5/tree/src/components/ActivityDiagram.svelte
1. When a loader awaits, this is a time to show blank shell and transition in
1. Full multilingual text search:
	- PGroonga: https://supabase.com/docs/guides/database/extensions/pgroonga
1. Prettier URLs? with hashIDs (can hash the uuid): https://supabase.com/docs/guides/database/extensions/pg_hashids


UPGRADE FORMS
1. Some existing forms don't use react-hook-form: -- the add-deck form, for one.

DATA LOADING
1. âœ… replace useLang with router feature
1. âœ… replace the old useProfile and ProfileFull
1. âœ… refresh all the fetcher hooks w the select-paradigm code
1. âœ… don't use `enabled` to waterfall useQueries on auth context
		perhaps this will just be a code convention only render components after auth
		perhaps there is a better way to use the params / data / keys
1. Cache structure: we need to be able to retrieve objects by their UUID alone...
		phrases in particular. now also relationships or public profiles, bc search results

ROUTER
1. âœ… if the navbar is not present, use its parent, somehow
1. can we aggregate all the context menu items and display them in groups. 
		(this collation should mean we can set a single page's title without affecting the menus) 
1. âœ… What is the best way to get the $lang? is it `const { lang } = Route.useParams()` ? can we not get it in page props, or context?
		- yes to context: `const data = Route.useRouteContext()` does return the queryClient and the auth object (mixed together actually)
			- further can we access context from props?
1. Standardize how we handle: `const { navigate } = useRouter()` -- can we use some props or the `Route.` methods?
1. can we access the queryClient directly from context without the hook?
1. if the validateSearch is not present, can we use its parent? or can we just get params from the parent component?
1. âœ… research loaders, preloading, query client prefetching, etc. patterns so
		we can get the most out of things. 
		* âœ… access `auth` on first render
		* suspend until profile loads
		* âœ… suspend /$lang routes until language & deck load
		* when the router loader is suspending and then stops, transition in

CROSS-PLATFORM
1. âœ… compile to android with tauri
 		Make Tauri work with HMR and Vite setup
1. compile to ios with tauri

DATABASE
1. For the add_phrase_translation_card function we should set some permissions:
    ```sql 
    revoke execute on function public.hello_world from public;
    revoke execute on function public.hello_world from anon;
		-- grant execute on function public.hello_world from authenticated;
		````
