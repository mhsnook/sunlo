/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LearnImport } from './routes/learn'
import { Route as AuthImport } from './routes/_auth'
import { Route as LearnIndexImport } from './routes/learn/index'
import { Route as LearnQuickSearchImport } from './routes/learn/quick-search'
import { Route as LearnAddDeckImport } from './routes/learn/add-deck'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as LearnLangIndexImport } from './routes/learn/$lang/index'
import { Route as LearnLangSettingsImport } from './routes/learn/$lang/settings'
import { Route as LearnLangSearchImport } from './routes/learn/$lang/search'
import { Route as LearnLangBrowseImport } from './routes/learn/$lang/browse'
import { Route as LearnLangAddPhraseImport } from './routes/learn/$lang/add-phrase'

// Create Virtual Routes

const ProfileLazyImport = createFileRoute('/profile')()
const PrivacyPolicyLazyImport = createFileRoute('/privacy-policy')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const AuthSignupLazyImport = createFileRoute('/_auth/signup')()
const AuthSetNewPasswordLazyImport = createFileRoute(
  '/_auth/set-new-password',
)()
const AuthForgotPasswordLazyImport = createFileRoute('/_auth/forgot-password')()

// Create/Update Routes

const ProfileLazyRoute = ProfileLazyImport.update({
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))

const PrivacyPolicyLazyRoute = PrivacyPolicyLazyImport.update({
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/privacy-policy.lazy').then((d) => d.Route),
)

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const LearnRoute = LearnImport.update({
  path: '/learn',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const LearnIndexRoute = LearnIndexImport.update({
  path: '/',
  getParentRoute: () => LearnRoute,
} as any)

const AuthSignupLazyRoute = AuthSignupLazyImport.update({
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/signup.lazy').then((d) => d.Route))

const AuthSetNewPasswordLazyRoute = AuthSetNewPasswordLazyImport.update({
  path: '/set-new-password',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/set-new-password.lazy').then((d) => d.Route),
)

const AuthForgotPasswordLazyRoute = AuthForgotPasswordLazyImport.update({
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/forgot-password.lazy').then((d) => d.Route),
)

const LearnQuickSearchRoute = LearnQuickSearchImport.update({
  path: '/quick-search',
  getParentRoute: () => LearnRoute,
} as any)

const LearnAddDeckRoute = LearnAddDeckImport.update({
  path: '/add-deck',
  getParentRoute: () => LearnRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const LearnLangIndexRoute = LearnLangIndexImport.update({
  path: '/$lang/',
  getParentRoute: () => LearnRoute,
} as any)

const LearnLangSettingsRoute = LearnLangSettingsImport.update({
  path: '/$lang/settings',
  getParentRoute: () => LearnRoute,
} as any)

const LearnLangSearchRoute = LearnLangSearchImport.update({
  path: '/$lang/search',
  getParentRoute: () => LearnRoute,
} as any)

const LearnLangBrowseRoute = LearnLangBrowseImport.update({
  path: '/$lang/browse',
  getParentRoute: () => LearnRoute,
} as any)

const LearnLangAddPhraseRoute = LearnLangAddPhraseImport.update({
  path: '/$lang/add-phrase',
  getParentRoute: () => LearnRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/learn': {
      id: '/learn'
      path: '/learn'
      fullPath: '/learn'
      preLoaderRoute: typeof LearnImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/learn/add-deck': {
      id: '/learn/add-deck'
      path: '/add-deck'
      fullPath: '/learn/add-deck'
      preLoaderRoute: typeof LearnAddDeckImport
      parentRoute: typeof LearnImport
    }
    '/learn/quick-search': {
      id: '/learn/quick-search'
      path: '/quick-search'
      fullPath: '/learn/quick-search'
      preLoaderRoute: typeof LearnQuickSearchImport
      parentRoute: typeof LearnImport
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/set-new-password': {
      id: '/_auth/set-new-password'
      path: '/set-new-password'
      fullPath: '/set-new-password'
      preLoaderRoute: typeof AuthSetNewPasswordLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupLazyImport
      parentRoute: typeof AuthImport
    }
    '/learn/': {
      id: '/learn/'
      path: '/'
      fullPath: '/learn/'
      preLoaderRoute: typeof LearnIndexImport
      parentRoute: typeof LearnImport
    }
    '/learn/$lang/add-phrase': {
      id: '/learn/$lang/add-phrase'
      path: '/$lang/add-phrase'
      fullPath: '/learn/$lang/add-phrase'
      preLoaderRoute: typeof LearnLangAddPhraseImport
      parentRoute: typeof LearnImport
    }
    '/learn/$lang/browse': {
      id: '/learn/$lang/browse'
      path: '/$lang/browse'
      fullPath: '/learn/$lang/browse'
      preLoaderRoute: typeof LearnLangBrowseImport
      parentRoute: typeof LearnImport
    }
    '/learn/$lang/search': {
      id: '/learn/$lang/search'
      path: '/$lang/search'
      fullPath: '/learn/$lang/search'
      preLoaderRoute: typeof LearnLangSearchImport
      parentRoute: typeof LearnImport
    }
    '/learn/$lang/settings': {
      id: '/learn/$lang/settings'
      path: '/$lang/settings'
      fullPath: '/learn/$lang/settings'
      preLoaderRoute: typeof LearnLangSettingsImport
      parentRoute: typeof LearnImport
    }
    '/learn/$lang/': {
      id: '/learn/$lang/'
      path: '/$lang'
      fullPath: '/learn/$lang'
      preLoaderRoute: typeof LearnLangIndexImport
      parentRoute: typeof LearnImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AuthRoute: AuthRoute.addChildren({
    AuthLoginRoute,
    AuthForgotPasswordLazyRoute,
    AuthSetNewPasswordLazyRoute,
    AuthSignupLazyRoute,
  }),
  LearnRoute: LearnRoute.addChildren({
    LearnAddDeckRoute,
    LearnQuickSearchRoute,
    LearnIndexRoute,
    LearnLangAddPhraseRoute,
    LearnLangBrowseRoute,
    LearnLangSearchRoute,
    LearnLangSettingsRoute,
    LearnLangIndexRoute,
  }),
  AboutLazyRoute,
  PrivacyPolicyLazyRoute,
  ProfileLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/learn",
        "/about",
        "/privacy-policy",
        "/profile"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login",
        "/_auth/forgot-password",
        "/_auth/set-new-password",
        "/_auth/signup"
      ]
    },
    "/learn": {
      "filePath": "learn.tsx",
      "children": [
        "/learn/add-deck",
        "/learn/quick-search",
        "/learn/",
        "/learn/$lang/add-phrase",
        "/learn/$lang/browse",
        "/learn/$lang/search",
        "/learn/$lang/settings",
        "/learn/$lang/"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.lazy.tsx"
    },
    "/profile": {
      "filePath": "profile.lazy.tsx"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/learn/add-deck": {
      "filePath": "learn/add-deck.tsx",
      "parent": "/learn"
    },
    "/learn/quick-search": {
      "filePath": "learn/quick-search.tsx",
      "parent": "/learn"
    },
    "/_auth/forgot-password": {
      "filePath": "_auth/forgot-password.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/set-new-password": {
      "filePath": "_auth/set-new-password.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/signup": {
      "filePath": "_auth/signup.lazy.tsx",
      "parent": "/_auth"
    },
    "/learn/": {
      "filePath": "learn/index.tsx",
      "parent": "/learn"
    },
    "/learn/$lang/add-phrase": {
      "filePath": "learn/$lang/add-phrase.tsx",
      "parent": "/learn"
    },
    "/learn/$lang/browse": {
      "filePath": "learn/$lang/browse.tsx",
      "parent": "/learn"
    },
    "/learn/$lang/search": {
      "filePath": "learn/$lang/search.tsx",
      "parent": "/learn"
    },
    "/learn/$lang/settings": {
      "filePath": "learn/$lang/settings.tsx",
      "parent": "/learn"
    },
    "/learn/$lang/": {
      "filePath": "learn/$lang/index.tsx",
      "parent": "/learn"
    }
  }
}
ROUTE_MANIFEST_END */
