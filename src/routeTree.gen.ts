/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LearnImport } from './routes/learn'
import { Route as UserImport } from './routes/_user'
import { Route as AuthImport } from './routes/_auth'
import { Route as LearnIndexImport } from './routes/learn/index'
import { Route as LearnQuickSearchImport } from './routes/learn/quick-search'
import { Route as LearnAddDeckImport } from './routes/learn/add-deck'
import { Route as UserProfileImport } from './routes/_user/profile'
import { Route as UserGettingStartedImport } from './routes/_user/getting-started'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as LearnLangReviewImport } from './routes/learn/$lang/review'
import { Route as LearnLangTabsImport } from './routes/learn/$lang/_tabs'
import { Route as UserProfileChangePasswordImport } from './routes/_user/profile.change-password'
import { Route as UserProfileChangeEmailImport } from './routes/_user/profile.change-email'
import { Route as LearnLangTabsIndexImport } from './routes/learn/$lang/_tabs/index'
import { Route as LearnLangTabsPublicLibraryImport } from './routes/learn/$lang/_tabs/public-library'
import { Route as LearnLangTabsInviteFriendImport } from './routes/learn/$lang/_tabs/invite-friend'
import { Route as LearnLangTabsDeckSettingsImport } from './routes/learn/$lang/_tabs/deck-settings'
import { Route as LearnLangTabsAddPhraseImport } from './routes/learn/$lang/_tabs/add-phrase'

// Create Virtual Routes

const PrivacyPolicyLazyImport = createFileRoute('/privacy-policy')()
const ComponentsLazyImport = createFileRoute('/components')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const LearnLangImport = createFileRoute('/learn/$lang')()
const AuthSignupLazyImport = createFileRoute('/_auth/signup')()
const AuthSetNewPasswordLazyImport = createFileRoute(
  '/_auth/set-new-password',
)()
const AuthForgotPasswordLazyImport = createFileRoute('/_auth/forgot-password')()

// Create/Update Routes

const PrivacyPolicyLazyRoute = PrivacyPolicyLazyImport.update({
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/privacy-policy.lazy').then((d) => d.Route),
)

const ComponentsLazyRoute = ComponentsLazyImport.update({
  path: '/components',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/components.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const LearnRoute = LearnImport.update({
  path: '/learn',
  getParentRoute: () => rootRoute,
} as any)

const UserRoute = UserImport.update({
  id: '/_user',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const LearnLangRoute = LearnLangImport.update({
  path: '/$lang',
  getParentRoute: () => LearnRoute,
} as any)

const LearnIndexRoute = LearnIndexImport.update({
  path: '/',
  getParentRoute: () => LearnRoute,
} as any)

const AuthSignupLazyRoute = AuthSignupLazyImport.update({
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/signup.lazy').then((d) => d.Route))

const AuthSetNewPasswordLazyRoute = AuthSetNewPasswordLazyImport.update({
  path: '/set-new-password',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/set-new-password.lazy').then((d) => d.Route),
)

const AuthForgotPasswordLazyRoute = AuthForgotPasswordLazyImport.update({
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/forgot-password.lazy').then((d) => d.Route),
)

const LearnQuickSearchRoute = LearnQuickSearchImport.update({
  path: '/quick-search',
  getParentRoute: () => LearnRoute,
} as any)

const LearnAddDeckRoute = LearnAddDeckImport.update({
  path: '/add-deck',
  getParentRoute: () => LearnRoute,
} as any)

const UserProfileRoute = UserProfileImport.update({
  path: '/profile',
  getParentRoute: () => UserRoute,
} as any)

const UserGettingStartedRoute = UserGettingStartedImport.update({
  path: '/getting-started',
  getParentRoute: () => UserRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const LearnLangReviewRoute = LearnLangReviewImport.update({
  path: '/review',
  getParentRoute: () => LearnLangRoute,
} as any)

const LearnLangTabsRoute = LearnLangTabsImport.update({
  id: '/_tabs',
  getParentRoute: () => LearnLangRoute,
} as any)

const UserProfileChangePasswordRoute = UserProfileChangePasswordImport.update({
  path: '/change-password',
  getParentRoute: () => UserProfileRoute,
} as any)

const UserProfileChangeEmailRoute = UserProfileChangeEmailImport.update({
  path: '/change-email',
  getParentRoute: () => UserProfileRoute,
} as any)

const LearnLangTabsIndexRoute = LearnLangTabsIndexImport.update({
  path: '/',
  getParentRoute: () => LearnLangTabsRoute,
} as any)

const LearnLangTabsPublicLibraryRoute = LearnLangTabsPublicLibraryImport.update(
  {
    path: '/public-library',
    getParentRoute: () => LearnLangTabsRoute,
  } as any,
)

const LearnLangTabsInviteFriendRoute = LearnLangTabsInviteFriendImport.update({
  path: '/invite-friend',
  getParentRoute: () => LearnLangTabsRoute,
} as any)

const LearnLangTabsDeckSettingsRoute = LearnLangTabsDeckSettingsImport.update({
  path: '/deck-settings',
  getParentRoute: () => LearnLangTabsRoute,
} as any)

const LearnLangTabsAddPhraseRoute = LearnLangTabsAddPhraseImport.update({
  path: '/add-phrase',
  getParentRoute: () => LearnLangTabsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_user': {
      id: '/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/learn': {
      id: '/learn'
      path: '/learn'
      fullPath: '/learn'
      preLoaderRoute: typeof LearnImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/components': {
      id: '/components'
      path: '/components'
      fullPath: '/components'
      preLoaderRoute: typeof ComponentsLazyImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_user/getting-started': {
      id: '/_user/getting-started'
      path: '/getting-started'
      fullPath: '/getting-started'
      preLoaderRoute: typeof UserGettingStartedImport
      parentRoute: typeof UserImport
    }
    '/_user/profile': {
      id: '/_user/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof UserProfileImport
      parentRoute: typeof UserImport
    }
    '/learn/add-deck': {
      id: '/learn/add-deck'
      path: '/add-deck'
      fullPath: '/learn/add-deck'
      preLoaderRoute: typeof LearnAddDeckImport
      parentRoute: typeof LearnImport
    }
    '/learn/quick-search': {
      id: '/learn/quick-search'
      path: '/quick-search'
      fullPath: '/learn/quick-search'
      preLoaderRoute: typeof LearnQuickSearchImport
      parentRoute: typeof LearnImport
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/set-new-password': {
      id: '/_auth/set-new-password'
      path: '/set-new-password'
      fullPath: '/set-new-password'
      preLoaderRoute: typeof AuthSetNewPasswordLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupLazyImport
      parentRoute: typeof AuthImport
    }
    '/learn/': {
      id: '/learn/'
      path: '/'
      fullPath: '/learn/'
      preLoaderRoute: typeof LearnIndexImport
      parentRoute: typeof LearnImport
    }
    '/_user/profile/change-email': {
      id: '/_user/profile/change-email'
      path: '/change-email'
      fullPath: '/profile/change-email'
      preLoaderRoute: typeof UserProfileChangeEmailImport
      parentRoute: typeof UserProfileImport
    }
    '/_user/profile/change-password': {
      id: '/_user/profile/change-password'
      path: '/change-password'
      fullPath: '/profile/change-password'
      preLoaderRoute: typeof UserProfileChangePasswordImport
      parentRoute: typeof UserProfileImport
    }
    '/learn/$lang': {
      id: '/learn/$lang'
      path: '/$lang'
      fullPath: '/learn/$lang'
      preLoaderRoute: typeof LearnLangImport
      parentRoute: typeof LearnImport
    }
    '/learn/$lang/_tabs': {
      id: '/learn/$lang/_tabs'
      path: '/$lang'
      fullPath: '/learn/$lang'
      preLoaderRoute: typeof LearnLangTabsImport
      parentRoute: typeof LearnLangRoute
    }
    '/learn/$lang/review': {
      id: '/learn/$lang/review'
      path: '/review'
      fullPath: '/learn/$lang/review'
      preLoaderRoute: typeof LearnLangReviewImport
      parentRoute: typeof LearnLangImport
    }
    '/learn/$lang/_tabs/add-phrase': {
      id: '/learn/$lang/_tabs/add-phrase'
      path: '/add-phrase'
      fullPath: '/learn/$lang/add-phrase'
      preLoaderRoute: typeof LearnLangTabsAddPhraseImport
      parentRoute: typeof LearnLangTabsImport
    }
    '/learn/$lang/_tabs/deck-settings': {
      id: '/learn/$lang/_tabs/deck-settings'
      path: '/deck-settings'
      fullPath: '/learn/$lang/deck-settings'
      preLoaderRoute: typeof LearnLangTabsDeckSettingsImport
      parentRoute: typeof LearnLangTabsImport
    }
    '/learn/$lang/_tabs/invite-friend': {
      id: '/learn/$lang/_tabs/invite-friend'
      path: '/invite-friend'
      fullPath: '/learn/$lang/invite-friend'
      preLoaderRoute: typeof LearnLangTabsInviteFriendImport
      parentRoute: typeof LearnLangTabsImport
    }
    '/learn/$lang/_tabs/public-library': {
      id: '/learn/$lang/_tabs/public-library'
      path: '/public-library'
      fullPath: '/learn/$lang/public-library'
      preLoaderRoute: typeof LearnLangTabsPublicLibraryImport
      parentRoute: typeof LearnLangTabsImport
    }
    '/learn/$lang/_tabs/': {
      id: '/learn/$lang/_tabs/'
      path: '/'
      fullPath: '/learn/$lang/'
      preLoaderRoute: typeof LearnLangTabsIndexImport
      parentRoute: typeof LearnLangTabsImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AuthRoute: AuthRoute.addChildren({
    AuthLoginRoute,
    AuthForgotPasswordLazyRoute,
    AuthSetNewPasswordLazyRoute,
    AuthSignupLazyRoute,
  }),
  UserRoute: UserRoute.addChildren({
    UserGettingStartedRoute,
    UserProfileRoute: UserProfileRoute.addChildren({
      UserProfileChangeEmailRoute,
      UserProfileChangePasswordRoute,
    }),
  }),
  LearnRoute: LearnRoute.addChildren({
    LearnAddDeckRoute,
    LearnQuickSearchRoute,
    LearnIndexRoute,
    LearnLangRoute: LearnLangRoute.addChildren({
      LearnLangTabsRoute: LearnLangTabsRoute.addChildren({
        LearnLangTabsAddPhraseRoute,
        LearnLangTabsDeckSettingsRoute,
        LearnLangTabsInviteFriendRoute,
        LearnLangTabsPublicLibraryRoute,
        LearnLangTabsIndexRoute,
      }),
      LearnLangReviewRoute,
    }),
  }),
  AboutLazyRoute,
  ComponentsLazyRoute,
  PrivacyPolicyLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_user",
        "/learn",
        "/about",
        "/components",
        "/privacy-policy"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login",
        "/_auth/forgot-password",
        "/_auth/set-new-password",
        "/_auth/signup"
      ]
    },
    "/_user": {
      "filePath": "_user.tsx",
      "children": [
        "/_user/getting-started",
        "/_user/profile"
      ]
    },
    "/learn": {
      "filePath": "learn.tsx",
      "children": [
        "/learn/add-deck",
        "/learn/quick-search",
        "/learn/",
        "/learn/$lang"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/components": {
      "filePath": "components.lazy.tsx"
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.lazy.tsx"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_user/getting-started": {
      "filePath": "_user/getting-started.tsx",
      "parent": "/_user"
    },
    "/_user/profile": {
      "filePath": "_user/profile.tsx",
      "parent": "/_user",
      "children": [
        "/_user/profile/change-email",
        "/_user/profile/change-password"
      ]
    },
    "/learn/add-deck": {
      "filePath": "learn/add-deck.tsx",
      "parent": "/learn"
    },
    "/learn/quick-search": {
      "filePath": "learn/quick-search.tsx",
      "parent": "/learn"
    },
    "/_auth/forgot-password": {
      "filePath": "_auth/forgot-password.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/set-new-password": {
      "filePath": "_auth/set-new-password.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/signup": {
      "filePath": "_auth/signup.lazy.tsx",
      "parent": "/_auth"
    },
    "/learn/": {
      "filePath": "learn/index.tsx",
      "parent": "/learn"
    },
    "/_user/profile/change-email": {
      "filePath": "_user/profile.change-email.tsx",
      "parent": "/_user/profile"
    },
    "/_user/profile/change-password": {
      "filePath": "_user/profile.change-password.tsx",
      "parent": "/_user/profile"
    },
    "/learn/$lang": {
      "filePath": "learn/$lang",
      "parent": "/learn",
      "children": [
        "/learn/$lang/_tabs",
        "/learn/$lang/review"
      ]
    },
    "/learn/$lang/_tabs": {
      "filePath": "learn/$lang/_tabs.tsx",
      "parent": "/learn/$lang",
      "children": [
        "/learn/$lang/_tabs/add-phrase",
        "/learn/$lang/_tabs/deck-settings",
        "/learn/$lang/_tabs/invite-friend",
        "/learn/$lang/_tabs/public-library",
        "/learn/$lang/_tabs/"
      ]
    },
    "/learn/$lang/review": {
      "filePath": "learn/$lang/review.tsx",
      "parent": "/learn/$lang"
    },
    "/learn/$lang/_tabs/add-phrase": {
      "filePath": "learn/$lang/_tabs/add-phrase.tsx",
      "parent": "/learn/$lang/_tabs"
    },
    "/learn/$lang/_tabs/deck-settings": {
      "filePath": "learn/$lang/_tabs/deck-settings.tsx",
      "parent": "/learn/$lang/_tabs"
    },
    "/learn/$lang/_tabs/invite-friend": {
      "filePath": "learn/$lang/_tabs/invite-friend.tsx",
      "parent": "/learn/$lang/_tabs"
    },
    "/learn/$lang/_tabs/public-library": {
      "filePath": "learn/$lang/_tabs/public-library.tsx",
      "parent": "/learn/$lang/_tabs"
    },
    "/learn/$lang/_tabs/": {
      "filePath": "learn/$lang/_tabs/index.tsx",
      "parent": "/learn/$lang/_tabs"
    }
  }
}
ROUTE_MANIFEST_END */
